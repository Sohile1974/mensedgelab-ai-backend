from flask import Flask, request, make_response, send_from_directory, jsonify
import openai
import os
import re
import uuid
import datetime
from weasyprint import HTML

app = Flask(__name__)

@app.route("/evaluate-photo", methods=["POST"])
def evaluate_photo():
    try:
        print("‚úÖ Received POST request to /evaluate-photo")
        data = request.get_json(force=True)
        print("üß© Received data:", data)

        if not data or "messages" not in data:
            print("‚ùå 'messages' field is missing.")
            return make_response("‚ùå 'messages' field is missing.", 400)

        content_items = data["messages"][0]["content"]
        text_block = next(item for item in content_items if item["type"] == "text")
        image_block = next(item for item in content_items if item["type"] == "image_url")

        user_prompt = text_block["text"].strip()
        image_url = image_block["image_url"]["url"].strip()

        if len(user_prompt) > 500:
            user_prompt = user_prompt[:500] + "..."

        user_age = int(re.search(r"user is (\d+)", user_prompt, re.IGNORECASE).group(1)) if re.search(r"user is (\d+)", user_prompt, re.IGNORECASE) else None
        user_height = int(re.search(r"(\d+)\s*cm", user_prompt).group(1)) if re.search(r"(\d+)\s*cm", user_prompt) else None
        user_weight = int(re.search(r"weighs (\d+)", user_prompt, re.IGNORECASE).group(1)) if re.search(r"weighs (\d+)", user_prompt, re.IGNORECASE) else None
        bmi = round(user_weight / ((user_height / 100) ** 2), 1) if user_height and user_weight else 0.0

        client = openai.OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

        # üîí Step 1 ‚Äì Image analysis (DO NOT TOUCH)
        step1_prompt_primary = (
            """Describe the person‚Äôs physique in this image for a fitness evaluation. This is a professional submission intended for body composition analysis. Focus on posture, muscle tone, and fat distribution. Do not make assumptions about identity or context. Do not refuse unless the image is clearly inappropriate or unviewable."""
        )
        step1_prompt_fallback = (
            "Describe the person in this image, including general body type, stance, posture, and muscle/fat visibility. "
            "Keep the tone factual and observational only."
        )

        def build_step1(prompt_text):
            return [{"role": "user", "content": [
                {"type": "text", "text": prompt_text},
                {"type": "image_url", "image_url": {"url": image_url}}
            ]}]

        print("‚è≥ Calling GPT Step 1...")
        try:
            step1_response = client.chat.completions.create(
                model="gpt-4o",
                messages=build_step1(step1_prompt_primary),
                timeout=12
            )
            visual_summary = step1_response.choices[0].message.content.strip()

            if "i'm sorry" in visual_summary.lower() or "cannot" in visual_summary.lower():
                print("‚ö†Ô∏è Primary prompt failed, retrying with fallback...")
                step1_response = client.chat.completions.create(
                    model="gpt-4o",
                    messages=build_step1(step1_prompt_fallback),
                    timeout=12
                )
                visual_summary = step1_response.choices[0].message.content.strip()

        except Exception as e:
            print("üî• GPT Step 1 failed:", str(e))
            return make_response("‚ö†Ô∏è Image analysis failed. Please submit a clear, full-body fitness-style photo.", 200)

        if "i'm sorry" in visual_summary.lower() or "cannot" in visual_summary.lower():
            return make_response("‚ö†Ô∏è The submitted photo could not be evaluated. Please ensure it is well-lit, does not include sensitive content, and clearly shows your physique.", 200)

        # ‚úÖ Step 2 (as-is, untouched)
        step2_prompt = f"""You are a professional AI fitness coach. Write a structured HTML report using only <strong>, <br>, <ul>, <li>. Avoid markdown. Your tone is that of a strict coach who gives honest, motivating feedback. Highlight strengths but give no-nonsense direction for improvement.

<strong>User Profile</strong><br>
Age: {user_age or 'Not provided'}<br>
Height: {user_height or 'Not provided'} cm<br>
Weight: {user_weight or 'Not provided'} kg<br>
BMI: {bmi:.1f} {'(calculated)' if bmi else ''}<br><br>

<strong>Image Summary</strong><br>
{visual_summary}<br><br>

<strong>Physique Score (Out of 100)</strong><br>
Assign a score between 0‚Äì100 based on body fat visibility, posture, proportionality, muscle definition, and BMI. Be strict but fair. Then justify the score in 2 sentences.<br><br>

<strong>Overall Impression</strong><br>
There‚Äôs clear potential here...<br><br>
... (unchanged sections continue here)

<strong>Disclaimer</strong><br>
This report is generated by AI for educational purposes only. It does not constitute medical advice or replace consultation with a licensed professional.
"""

        print("‚è≥ Calling GPT Step 2...")
        try:
            step2_response = client.chat.completions.create(
                model="gpt-4o",
                messages=[{"role": "user", "content": [{"type": "text", "text": step2_prompt}]}],
                timeout=15
            )
            final_report = step2_response.choices[0].message.content.strip()
            print("‚úÖ Final Report Generated.")
        except Exception as e:
            print("üî• GPT Step 2 failed:", str(e))
            final_report = "‚ö†Ô∏è We encountered an error generating your evaluation. Please try again shortly."
            return make_response(final_report, 200)

        # ‚úÖ Generate PDF from final_report
        filename = f"report-{datetime.datetime.utcnow().strftime('%Y%m%d%H%M%S')}.pdf"
        filepath = f"static/{filename}"
        HTML(string=final_report).write_pdf(filepath)
        pdf_url = f"https://{request.host}/static/{filename}"

        return jsonify({
            "pdf_url": pdf_url,
            "status": "success"
        })

    except Exception as e:
        print("üî• Unexpected error:", str(e))
        return make_response(f"‚ö†Ô∏è Internal server error: {str(e)}", 500)

@app.route("/", methods=["GET"])
def index():
    return "Men's Edge Lab AI backend is running."

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=10000)
